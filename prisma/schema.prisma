generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Building {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  buildingName String   @unique
  createdAt    DateTime @default(now()) @map("created_at")
  floors       Floor[]

  @@map("buildings")
}

model Floor {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  floorNo    Int       @unique
  createdAt  DateTime  @default(now()) @map("created_at")
  Building   Building? @relation(fields: [buildingId], references: [id])
  buildingId String?   @db.ObjectId
  wings      Wing[]

  @@map("floors")
}

model Wing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  wingName  String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  Floor     Floor?   @relation(fields: [floorId], references: [id])
  floorId   String?  @db.ObjectId
  seats     Seat[]

  @@map("wings")
}

model Seat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  seatNumber String   @unique
  createdAt  DateTime @default(now()) @map("created_at")
  Wing       Wing?    @relation(fields: [wingId], references: [id])
  wingId     String?  @db.ObjectId

  @@map("seats")
}
